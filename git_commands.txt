sudo apt-get install git

git status # file status in directory

git clone git://github.com/schacon/grit.git

git add FILENAME # make an index

cat .gitignore # then in file point in format: "*.[oa]" (files ended on о/а)

git diff # highlight lines not added in index
git diff --cached # highlight what goes in next commit

git commit -v # -v means save delta

git rm [FILENAME]# remove file

git log # display all commits
git log -p # display all commit's delta
git log -p -2 # display last 2 commit's delta
git log -p -2 --word-diff # display word changes (instead of lines)
git log -p -2 --stat # display how many changes made in commit
git log --since=2.weeks # display commits for last 2 weeks
git log --oneline --decorate # hashes, branches, comments, tags of all commits

git config --global core.editor "atom --wait" # change default editor (--wait means wait until editor will be closed)
git config --global core.editor "subl -n -w" # the same for sublime text

git commit --amend # if you need to change the last commit

git reset HEAD <файл> # if you want to change certain file in index

git checkout ???????

git remote -v # shows repositories (-v shows link) you've ever cloned
git remote add [name] [url] # add new repository with local name, what gives you an opportunity to do:
git fetch [name of the remote repository] # extract(fetch) all information from remote repository

# when you clone a repository command "clone" add this remote rep as "origin",
# that is why "git fetch origin" fetches everything from rep yo've cloned.

# fetch extract data in your local rep however does not merge it with
# your files and does not change what u r currently working on.

git pull # DOES merge your data with extracted clone

git push [rem. rep.] [branch] # (git push origin master) send your files to rem rep

git remote show origin # shows info about rem rep "origin"

git remote rename OLDNAME NEW # renaming of a short name for a rem rep


# tags give an opportunity to emphasize certain things as important ones,
# (like "v1.0" etc)
git tag # display current tags
git tag -l 'v1.4.2.*' # searching for a certaint tags

# there are three main tag types: annotate (has hash, name who tagged, e-mail, date,
# can be checked with GPG), lightweighted and signed
git tag -a v1.4 -m 'my version 1.4' # -a means annotate; -m is accompanying msg
git show v1.4 # display tag (with accomp msg) ant the commit tag attached
git tag -s v1.5 -m 'my signed 1.5 tag' # -s means signed (with GPG)
git tag v1.6-lw # lightweighted tag (without options -a -m -s)
git tag -a v1.4.1 -m 'version 1.4.1' [CERTAIN_COMMIT_HASH] # tagging previous CERTAIN_COMMIT_HASH

# git push does not send tag on rem rep. that's why:
git push [rep_name] [tag_name] # send certain tag on rem. rep.
git push [rep_name] --tags # send all tags you've created

# TIPs!!!!!!
git config --global alias.ci commit # instead of "git commit" you can write "git ci"
git config --global alias.unstage 'reset HEAD --' # that makes "git unstage fileA" and "git reset HEAD fileA" equivalent
git config --global alias.last 'log -p -1 HEAD' # git last = git log -p -1


# branches
git branch testing # creates new branch, bud HEAD doesn't point to it yet

git checkout testing # this moves HEAD to the "testing" branches
